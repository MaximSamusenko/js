{"version":3,"sources":["../src/index.ts","../src/messageSerializer.ts","../src/requestIdRegistry.ts","../src/serviceFactory.ts","../src/serviceProxy.ts"],"sourcesContent":["import { MessageSender } from \"./messageSender\";\r\nimport { JsonRpcMessageSerializer } from \"./messageSerializer\";\r\nimport { SimpleRequestIdRegistry } from \"./requestIdRegistry\";\r\nimport { ProxyServiceFactory } from \"./serviceFactory\";\r\nimport { ServiceProxy, SimpleServiceProxy } from \"./serviceProxy\";\r\n\r\nexport function serviceProxy<SERVICE_ID>(messageSender: MessageSender<string, null>): ServiceProxy<string, null, SERVICE_ID> {\r\n    return new SimpleServiceProxy(messageSender, new JsonRpcMessageSerializer<SERVICE_ID>(), new SimpleRequestIdRegistry(), new ProxyServiceFactory<SERVICE_ID>(), (err) => {\r\n        console.error(err);\r\n    })\r\n}\r\n\r\nexport { MessageSender, JsonRpcMessageSerializer, SimpleRequestIdRegistry, ProxyServiceFactory, SimpleServiceProxy };","\r\nexport type RequestMessage<SERVICE_ID> = { id: number, method: string, params: unknown[], service: SERVICE_ID };\r\nexport type ResponseMessage = { id: number, result: unknown };\r\nexport type ErrorMessage = { id: number, error: { code?: number, message: string, data?: Record<string, undefined> } }\r\n\r\nexport function isRequestMessage<SERVICE_ID>(message: RequestMessage<SERVICE_ID> | ResponseMessage | ErrorMessage): message is RequestMessage<SERVICE_ID> {\r\n    return hasId(message) && 'service' in message && 'method' in message;\r\n}\r\n\r\nexport function isErrorMessage<SERVICE_ID>(message: RequestMessage<SERVICE_ID> | ResponseMessage | ErrorMessage): message is ErrorMessage {\r\n    return hasId(message) && 'error' in message;\r\n}\r\n\r\nexport function isResponseMessage<SERVICE_ID>(message: RequestMessage<SERVICE_ID> | ResponseMessage | ErrorMessage): message is ResponseMessage {\r\n    return hasId(message) && 'result' in message;\r\n}\r\n\r\nfunction hasId(message: any): message is { id: number } {\r\n    return 'id' in message && Number.isInteger(message.id);\r\n}\r\n\r\nexport interface MessageSerializer<T, SERVICE_ID> {\r\n    serializeRequest(requestMessage: RequestMessage<SERVICE_ID>): T;\r\n    serializeResponse(responseMessage: ResponseMessage): T;\r\n    serializeError(errorMessage: ErrorMessage): T;\r\n    deserializeMessage(message: T): RequestMessage<SERVICE_ID> | ResponseMessage | ErrorMessage;\r\n}\r\n\r\n\r\nexport class JsonRpcMessageSerializer<SERVICE_ID> implements MessageSerializer<string, SERVICE_ID> {\r\n    deserializeMessage(message: string): ResponseMessage | RequestMessage<SERVICE_ID> | ErrorMessage {\r\n        return JSON.parse(message);\r\n    }\r\n\r\n    serializeResponse(responseMessage: ResponseMessage): string {\r\n        return JSON.stringify(responseMessage);\r\n    }\r\n\r\n    serializeRequest(requestMessage: RequestMessage<SERVICE_ID>): string {\r\n        return JSON.stringify(requestMessage);\r\n    }\r\n\r\n    serializeError(errorMessage: ErrorMessage): string {\r\n        return JSON.stringify(errorMessage);\r\n    }\r\n}","export interface RequestIdRegistry {\r\n    registerRequest<T>(): { id: number; promise: Promise<T>; };\r\n    resolveRequest<T>(id: number, value: T): void;\r\n    rejectRequest(id: number, error: unknown): void;\r\n}\r\n\r\nexport class SimpleRequestIdRegistry implements RequestIdRegistry {\r\n\r\n    private counter: number = 0;\r\n\r\n    private requestMap = new Map<number, { resolve: (value: any) => void; reject: (error: unknown) => void }>();\r\n\r\n    public registerRequest<T>(): { id: number; promise: Promise<T>; } {\r\n        let resolve: (value: any) => void = () => { };\r\n        let reject: (error: unknown) => void = () => { };\r\n\r\n        const promise = new Promise<T>((res, rej) => {\r\n            resolve = res;\r\n            reject = rej;\r\n        });\r\n        this.requestMap.set(this.counter, { resolve, reject });\r\n        return { id: this.counter++, promise };\r\n    }\r\n\r\n    public resolveRequest<T>(id: number, value: T): void {\r\n        const request = this.requestMap.get(id);\r\n        if (request === undefined) throw new Error(`Can't process response: request with Id=${id} doesn't exists`);\r\n        request.resolve(value);\r\n        this.requestMap.delete(id);\r\n    }\r\n\r\n    public rejectRequest(id: number, error: Error): void {\r\n        const request = this.requestMap.get(id);\r\n        if (request === undefined) throw new Error(`Can't process response rejection: request with Id=${id} doesn't exists`);\r\n        request.reject(error);\r\n        this.requestMap.delete(id);\r\n    }\r\n}","import { Service } from \"./serviceTypes\";\r\n\r\nexport interface ServiceFactory<SERVICE_ID> {\r\n    getService<T extends Service>(serviceId: SERVICE_ID, sendMessage: SendMessageFunc): T;\r\n}\r\n\r\ntype SendMessageFunc = <R, SERVICE_ID>(serviceId: SERVICE_ID, actionName: string, args: any[]) => Promise<R>;\r\n\r\nexport class ProxyServiceFactory<SERVICE_ID> implements ServiceFactory<SERVICE_ID> {\r\n    private readonly serviceProxies = new Map<SERVICE_ID, Service>();\r\n\r\n    public getService<T extends Service>(serviceId: SERVICE_ID, sendMessage: SendMessageFunc): T {\r\n        const existingProxy = this.serviceProxies.get(serviceId);\r\n        if (existingProxy) return existingProxy as T;\r\n        const newProxy = new Proxy<T>({} as T, { get: getFunc(serviceId, sendMessage) });\r\n        this.serviceProxies.set(serviceId, newProxy);\r\n        return newProxy;\r\n    }\r\n}\r\n\r\nfunction getFunc<SERVICE_ID>(serviceId: SERVICE_ID, sendMessage: SendMessageFunc) {\r\n    return <T extends Service, K extends keyof T>(_target: T, prop: K, _receiver): T[K] => {\r\n        return new Proxy<T[K]>((() => { }) as any, { apply: applyFunc(serviceId, prop, sendMessage) });\r\n    };\r\n}\r\n\r\nfunction applyFunc<SERVICE_ID>(serviceId: SERVICE_ID, actionName: string | number | symbol, sendMessage: SendMessageFunc) {\r\n    return <T>(_target, _thisArg, argumentsList): Promise<T> => {\r\n        return sendMessage(serviceId, actionName.toString(), argumentsList);\r\n    }\r\n}\r\n","import { MessageSender } from \"./messageSender\";\r\nimport { ErrorMessage, MessageSerializer, RequestMessage, ResponseMessage, isErrorMessage, isRequestMessage, isResponseMessage } from \"./messageSerializer\";\r\nimport { RequestIdRegistry as RequestStore } from \"./requestIdRegistry\";\r\nimport { ServiceFactory } from \"./serviceFactory\";\r\nimport { ServiceWithContext, Service } from \"./serviceTypes\";\r\n\r\nexport interface ServiceProxy<T, K, SERVICE_ID> {\r\n    getService<S extends Service>(serviceId: SERVICE_ID): S;\r\n    register<S extends Service>(serviceId: SERVICE_ID, service: ServiceWithContext<S, K>): ServiceProxy<T, K, SERVICE_ID>\r\n}\r\n\r\nexport type ERR_CODE = 'INVALID_MESSAGE_FORMAT' | 'SERVICE_IS_NOT_IMPLEMENTED' | 'ACTION_NOT_FOUND' | 'INVALID_REQUEST_ID';\r\ntype ErrorHandler = (err: { errCode: ERR_CODE, details: Record<string, unknown> }) => void;\r\n\r\nexport class SimpleServiceProxy<T, K, SERVICE_ID> implements ServiceProxy<T, K, SERVICE_ID> {\r\n    private readonly messageSender: MessageSender<T, K>;\r\n    private readonly factory: ServiceFactory<SERVICE_ID>;\r\n    private readonly messageSerializer: MessageSerializer<T, SERVICE_ID>;\r\n    private readonly requestStore: RequestStore;\r\n    private readonly serviceImplementations = new Map<SERVICE_ID, ServiceWithContext<Service, K>>();\r\n    private readonly errorHandler: ErrorHandler;\r\n\r\n    constructor(messageSender: MessageSender<T, K>, messageSerializer: MessageSerializer<T, SERVICE_ID>, requestStore: RequestStore, serviceFactory: ServiceFactory<SERVICE_ID>, errorHandler: ErrorHandler) {\r\n        this.messageSender = messageSender;\r\n        this.factory = serviceFactory;\r\n        this.messageSerializer = messageSerializer;\r\n        this.requestStore = requestStore;\r\n        this.messageSender.subscribe(this.processMessage.bind(this));\r\n        this.errorHandler = errorHandler;\r\n    }\r\n\r\n    public getService<S extends Service>(serviceId: SERVICE_ID): S {\r\n        return this.factory.getService<S>(serviceId, this.sendRequestMessage.bind(this));\r\n    }\r\n\r\n    public register<S extends Service>(serviceId: SERVICE_ID, service: ServiceWithContext<S, K>): ServiceProxy<T, K, SERVICE_ID> {\r\n        this.serviceImplementations.set(serviceId, service);\r\n        return this;\r\n    }\r\n\r\n    protected processRequestMessage(message: RequestMessage<SERVICE_ID>, context: K): void {\r\n        const serviceImplementation = this.serviceImplementations.get(message.service);\r\n        if (!serviceImplementation) {\r\n            this.errorHandler({ errCode: \"SERVICE_IS_NOT_IMPLEMENTED\", details: { message, context } });\r\n            this.sendErrorMessage({ id: message.id, error: { message: \"SERVICE_IS_NOT_IMPLEMENTED\" } });\r\n            return;\r\n        }\r\n        if (!(message.method in serviceImplementation)) {\r\n            this.errorHandler({ errCode: \"ACTION_NOT_FOUND\", details: { message, context } });\r\n            this.sendErrorMessage({ id: message.id, error: { message: \"ACTION_NOT_FOUND\" } });\r\n            return;\r\n        }\r\n\r\n        const promise = serviceImplementation[message.method].call(serviceImplementation, ...message.params, context) as Promise<any>;\r\n        promise.catch((err) => {\r\n            this.sendErrorMessage({ id: message.id, error: { message: err.message } });\r\n        }).then((value) => {\r\n            this.sendResponseMessage(message.id, value);\r\n        });\r\n    }\r\n\r\n    protected processResponseMessage(message: ResponseMessage): void {\r\n        try {\r\n            this.requestStore.resolveRequest(message.id, message.result);\r\n        }\r\n        catch (err) {\r\n            this.errorHandler({ errCode: \"INVALID_REQUEST_ID\", details: { err, message } });\r\n        }\r\n    }\r\n\r\n    protected processErrorMessage(message: ErrorMessage): void {\r\n        try {\r\n            this.requestStore.rejectRequest(message.id, message.error);\r\n        }\r\n        catch (err) {\r\n            this.errorHandler({ errCode: \"INVALID_REQUEST_ID\", details: { err, message } });\r\n        }\r\n    }\r\n\r\n    protected processInvalidMessage(message: Record<string, unknown>, context: K): void {\r\n        this.errorHandler({ errCode: \"INVALID_MESSAGE_FORMAT\", details: { message, context } });\r\n\r\n    }\r\n\r\n    private sendRequestMessage<R>(service: SERVICE_ID, method: string, params: any[]): Promise<R> {\r\n        const { id: requestId, promise } = this.requestStore.registerRequest<R>();\r\n        const message = this.messageSerializer.serializeRequest({ id: requestId, service, method, params });\r\n        this.messageSender.sendMessage(message);\r\n        return promise;\r\n    }\r\n\r\n    private sendResponseMessage<R>(id: number, result: R): void {\r\n        const message = this.messageSerializer.serializeResponse({ id, result });\r\n        this.messageSender.sendMessage(message);\r\n    }\r\n\r\n    private sendErrorMessage<R>(error: ErrorMessage): void {\r\n        const message = this.messageSerializer.serializeError(error);\r\n        this.messageSender.sendMessage(message);\r\n    }\r\n\r\n    private processMessage(message: T, context: K) {\r\n        const deserializedMessage = this.messageSerializer.deserializeMessage(message);\r\n        if (isRequestMessage(deserializedMessage)) {\r\n            this.processRequestMessage(deserializedMessage, context);\r\n        } else if (isResponseMessage(deserializedMessage)) {\r\n            this.processResponseMessage(deserializedMessage);\r\n        } else if (isErrorMessage(deserializedMessage)) {\r\n            this.processErrorMessage(deserializedMessage);\r\n        } else {\r\n            this.processInvalidMessage(deserializedMessage, context);\r\n        }\r\n    }\r\n}"],"mappings":"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","names":[]}